//
//  task_9.swift
//  introduction_1
//
//  Created by Kristofer Sartorial on 3/4/25.
//

// Задание на слабые// сильные ссылки
//взяла отсюда https://www.youtube.com/live/TdnLjukE6Ws

import Foundation

class Solution{
    func run() {
        class A {
            var b: B?       // Сильная ссылка на объект класса B
            deinit {
                print("deinit at A")
            }
        }
        
        struct B {
              var a: A?       // Сильная ссылка на объект класса A
//            deinit {
//                print("deinit at B")
//            }
        }
        
        // Когда создаете экземпляры a и b и устанавливаете ссылки между ними:
        var a = A()
        var b = B()
        
        //в этом порядке присваивания b просто не успел создать сильную ссылку на а
        a.b = b
        b.a = a
        
        
        
        print(a.b!)
        print(b.a)
        
    }
}


// После выполнения метода run(), локальные переменные a и b выходят из области видимости, и ARC пытается освободить память. Однако, поскольку a и b ссылаются друг на друга через сильные ссылки, возникает циклическая ссылка. Это означает, что счетчик ссылок на оба объекта никогда не станет равным нулю, и память не будет освобождена. В результате deinit не будет вызван, и произойдет утечка памяти.

// Cообщения deinit at A и deinit at B не будут выведены, потому что объекты a и b не были освобождены из-за циклической ссылки.
